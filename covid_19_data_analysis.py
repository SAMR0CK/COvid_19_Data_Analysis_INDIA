# -*- coding: utf-8 -*-
"""COVID_19_data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B67At-Geprb_j754WVx5dYlsfqVtIm2A

# Installing and importing Libraries.
"""

!pip install requests
!pip install lxml
!pip install bs4
!pip install plotly

import requests
import bs4
import pandas as pd
import csv

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
# %matplotlib inline

import plotly
plotly.__version__

"""# Web Scraping COVID-19 Data.

Base URL = https://prsindia.org/covid-19/cases
"""

script_url = 'https://prsindia.org/covid-19/cases'
res = requests.get(script_url)   
soup = bs4.BeautifulSoup(res.text, 'lxml')

table = soup.find_all("table")  #Accessing COVID-19 Statewise Status class.

outfile = open("table_data.csv","w",newline='')
writer = csv.writer(outfile)

list_of_rows = []
for row in table[0].find_all('tr'):
    list_of_cells = []
    for cell in row.find_all(["th","td"]):
        text = cell.text
        list_of_cells.append(text)
    list_of_rows.append(list_of_cells)

for item in list_of_rows:
  writer.writerow(item)
outfile.close()

df = pd.read_csv('/content/table_data.csv')
df = df.drop("#", axis=1)
df.to_csv('covid.csv')

"""# EDA on COVID-19 Data."""

df = pd.read_csv('covid.csv').drop("Unnamed: 0", axis=1)
df.head()

"""Here we need to remove 0th row as it provides with overall data of INDIA."""

df.drop([0], inplace=True)

"""We need to reset our index back to 0 so that no problems occur in further processes."""

df.reset_index(inplace = True, drop = True)

df.head()

df.shape

"""Our data set comprises of 36 rows and 5 columns."""

list(df.columns)

#Check for null values.
df.isna().sum()

#Visualization for the missing values.
sns.heatmap(df.isnull())

#Remaining a state to Daman and Diu for ease.
df = df.replace('Dadra and Nagar Haveli and Daman and Diu', 'Daman and Diu')
df.head(8)

#Using info method to check about the data types.
df.info()

"""We see that the names of state or union territory is of object daat-type and denotes them as string, whereas other columns have numbers and data type is int64."""

# Checking correlations of all variables
df.corr()

#visualising the correlations.
sns.heatmap(df.corr(), annot=True)

#seaborn barplot
plt.figure(figsize=(8, 10))
sns.barplot(data = df, y="State/UT", x="Confirmed Cases");

"""We see that the total confirmed in Maharashtra is the highest up till date 6 August 2021.

Adding a columns death ratio, discharge ratio and active ratio in our dataset. 

Ratio = 100 * value / total
"""

df['Active Ratio'] = 100* df['Active Cases'] / df['Active Cases'].sum()
df['Death Ratio'] = 100* df['Death'] / df['Death'].sum()
df['Cured Ratio'] = 100* df['Cured/Discharged'] / df['Cured/Discharged'].sum()

df.head()

Death_ratio = df.sort_values('Death Ratio', ascending=False).head(10)
Death_ratio

#visualization as bar chart on the basis of death ratio
px.bar(Death_ratio, x="State/UT", y="Death", color="Death Ratio", title="Total Death Cases each State: ")

"""Maharashtra having the highest number of confirmed cases, also shows highest death ratio. We see that second highest is kerala, but the death ratio in kerala is not that high. It is possible that the recovery rate in Kerala would be high as we will see in further visualizations."""

Active_ratio = df.sort_values('Active Ratio', ascending=False).head(10)
Active_ratio

#visualization as bar chart on the basis of cured ratio
px.bar(Active_ratio, x="State/UT", y="Active Cases", color="Active Ratio", title="Total Active Cases each State: ")

"""We see as Maharashtra has the highest total number of confirmed cases, it has both high number in deaths and cured cases also. Kerala also shows high recovery rate."""

Cured_ratio = df.sort_values('Cured Ratio', ascending=False).head(10)
Cured_ratio

#visualization as bar chart on the basis of active ratio
px.bar(Cured_ratio, x="State/UT", y="Cured/Discharged", color="Cured Ratio", title="Total Cured Cases each State: ")

"""As of India Today, The total active cases in Kerela and Maharashtra are skyrocketing because of the large influx of international passengers, specially from the Middle East, before India announced a total lockdown in March 2020."""

sns.pairplot(df);

fig = px.pie(df, values='Confirmed Cases', names=df['State/UT'], title='Covid cases (%) in all states of India')
fig.show();

fig = px.choropleth(
    df,
    geojson="https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson",
    featureidkey='properties.ST_NM',
    locations='State/UT',
    color='Confirmed Cases',
    color_continuous_scale='Reds'
)

fig.update_geos(fitbounds="locations", visible=False)
fig.show()

fig = px.choropleth(
    df,
    geojson="https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson",
    featureidkey='properties.ST_NM',
    locations='State/UT',
    color='Active Cases',
    color_continuous_scale='Blues'
)

fig.update_geos(fitbounds="locations", visible=False)
fig.show()

fig = px.choropleth(
    df,
    geojson="https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson",
    featureidkey='properties.ST_NM',
    locations='State/UT',
    color='Death',
    color_continuous_scale='Greens', 
)

fig.update_geos(fitbounds="locations", visible=False)
fig.show()

